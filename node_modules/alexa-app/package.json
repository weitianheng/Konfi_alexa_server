{
  "_args": [
    [
      {
        "raw": "alexa-app@^2.1.0",
        "scope": null,
        "escapedName": "alexa-app",
        "name": "alexa-app",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "/Users/weisso/Desktop/6_semester/github/node_modules/alexa-app-server"
    ]
  ],
  "_from": "alexa-app@>=2.1.0 <3.0.0",
  "_id": "alexa-app@2.4.0",
  "_inCache": true,
  "_location": "/alexa-app",
  "_nodeVersion": "5.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/alexa-app-2.4.0.tgz_1483628541251_0.8835168925579637"
  },
  "_npmUser": {
    "name": "dblock",
    "email": "dblock@dblock.org"
  },
  "_npmVersion": "3.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "alexa-app@^2.1.0",
    "scope": null,
    "escapedName": "alexa-app",
    "name": "alexa-app",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/alexa-app-server"
  ],
  "_resolved": "https://registry.npmjs.org/alexa-app/-/alexa-app-2.4.0.tgz",
  "_shasum": "78ef8eb8730111af529c69f16f0b5bbfca9f2c98",
  "_shrinkwrap": null,
  "_spec": "alexa-app@^2.1.0",
  "_where": "/Users/weisso/Desktop/6_semester/github/node_modules/alexa-app-server",
  "author": {
    "name": "Matt Kruse",
    "email": "github@mattkruse.com",
    "url": "http://MattKruse.com"
  },
  "bugs": {
    "url": "https://github.com/matt-kruse/alexa-app/issues"
  },
  "dependencies": {
    "alexa-utterances": "^0.2.0",
    "bluebird": "^2.10.2",
    "numbered": "^1.0.0"
  },
  "description": "A module to simplify creation of Alexa (Amazon Echo) apps (Skills) using Node.js",
  "devDependencies": {
    "body-parser": "^1.15.2",
    "chai": "^3.4.1",
    "chai-as-promised": "^5.3.0",
    "chai-string": "^1.3.0",
    "coveralls": "^2.11.9",
    "danger": "0.6.10",
    "ejs": "^2.5.5",
    "eslint": "^2.9.0",
    "express": "^4.14.0",
    "istanbul": "^0.4.3",
    "mocha": "^2.3.4",
    "sinon": "^1.17.7",
    "sinon-chai": "^2.8.0",
    "supertest": "^2.0.1",
    "supertest-as-promised": "^4.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "78ef8eb8730111af529c69f16f0b5bbfca9f2c98",
    "tarball": "https://registry.npmjs.org/alexa-app/-/alexa-app-2.4.0.tgz"
  },
  "gitHead": "efbede5f3b06ddf45dc60b7077bc6d2c493cb1d1",
  "homepage": "https://github.com/matt-kruse/alexa-app#readme",
  "keywords": [
    "amazon",
    "echo",
    "alexa",
    "skills"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dblock",
      "email": "dblock@dblock.org"
    },
    {
      "name": "mkruse",
      "email": "github@mattkruse.com"
    }
  ],
  "name": "alexa-app",
  "optionalDependencies": {},
  "readme": "# alexa-app\n\n[![Build Status](https://travis-ci.org/matt-kruse/alexa-app.svg?branch=master)](https://travis-ci.org/matt-kruse/alexa-app)\n[![Coverage Status](https://coveralls.io/repos/github/matt-kruse/alexa-app/badge.svg?branch=master)](https://coveralls.io/github/matt-kruse/alexa-app?branch=master)\n\nA Node module to simplify development of Alexa apps (Skills) using Node.js.\n\n# Installation\n\n```bash\n\tnpm install alexa-app --save\n```\n\n# Stable Release\n\nYou're reading the documentation for the stable release of alexa-app, 2.4.0. Please see [CHANGELOG](CHANGELOG.md) and make sure to read [UPGRADING](UPGRADING.md) when upgrading from a previous version.\n\n# Summary\n\nThe alexa-app module does the dirty work of interpretting the JSON request from the Alexa platform and building the JSON response that can be spoken on an Alexa-compatible device, such as the Echo. It provides a DSL for defining intents, convenience methods to more easily build the response, handle session objects, and add cards.\n\nThe intent schema definition and sample utterances can be included in your application's definition, making it very simple to generate hundreds (or thousands!) of sample utterances with a few lines.\n\n# Features\n\n- Simplified handling of requests and generating responses\n- Support for asynchronous handlers\n- Easy connection into AWS Lambda or Node.js Express, etc.\n- Auto-generation of intent schema and sample utterances\n- Convenience handling of session data\n- Support for testing\n\n# Example Usage\n\n```javascript\nvar alexa = require(\"alexa-app\");\nvar app = new alexa.app(\"sample\");\n\napp.intent(\"number\", {\n    \"slots\": { \"number\": \"NUMBER\" },\n    \"utterances\": [\"say the number {1-100|number}\"]\n  },\n  function(request, response) {\n    var number = request.slot(\"number\");\n    response.say(\"You asked for the number \" + number);\n  }\n);\n```\n\nSee the [example](example) directory for a sample implementation.\n\n# API\n\nApps (\"skills\") define handlers for launch, intent, and session end, just like normal Alexa development. The alexa-app module provides a layer around this functionality that simplifies the interaction. Each handler gets passed a request and response object, which are custom for this module.\n\n## request\n\n```javascript\n// return the type of request received (LaunchRequest, IntentRequest, SessionEndedRequest)\nString request.type()\n\n// return the value passed in for a given slot name\nString request.slot(\"slotName\")\n\n// check if you can use session (read or write)\nBoolean request.hasSession()\n\n// return the session object\nSession request.getSession()\n\n// return the request context\nrequest.context\n\n// the raw request JSON object\nrequest.data\n```\n\n## response\n\nThe response JSON object is automatically built for you. All you need to do is tell it what you want to output.\n\n```javascript\n// tell Alexa to say something; multiple calls to say() will be appended to each other\n// all text output is treated as SSML\nresponse.say(String phrase)\n\n// empty the response text\nresponse.clear()\n\n// tell Alexa to re-prompt the user for a response, if it didn't hear anything valid\nresponse.reprompt(String phrase)\n\n// return a card to the user's Alexa app\n// for Object definition @see https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interface-reference#card-object\n// skill supports card(String title, String content) for backwards compat of type \"Simple\"\nresponse.card(Object card)\n\n// return a card instructing the user how to link their account to the skill\n// this internally sets the card response\nresponse.linkAccount()\n\n// play audio stream (send AudioPlayer.Play directive) @see https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/custom-audioplayer-interface-reference#play-directive\n// skill supports stream(String url, String token, String expectedPreviousToken, Integer offsetInMilliseconds)\nresponse.audioPlayerPlayStream(String playBehavior, Object stream)\n\n// stop playing audio strem (send AudioPlayer.Stop directive)\nresponse.audioPlayerStop()\n\n// clear audio player queue (send AudioPlayer.ClearQueue directive)\n// clearBehavior is \"CLEAR_ALL\" by default\nresponse.audioPlayerClearQueue([ String clearBehavior ])\n\n// tell Alexa whether the user's session is over; sessions end by default\n// you can optionally pass a reprompt message\nresponse.shouldEndSession(boolean end [, String reprompt] )\n\n// send the response to the Alexa device (success)\n// this is not required for synchronous handlers\n// you must call this from asynchronous handlers\nresponse.send()\n\n// trigger a response failure\n// the internal promise containing the response will be rejected, and should be handled by the calling environment\n// instead of the Alexa response being returned, the failure message will be passed\nresponse.fail(String message)\n\n// calls to response can be chained together\nresponse.say(\"OK\").send()\n```\n\n## session\n```javascript\n// check if you can use session (read or write)\nBoolean request.hasSession()\n\n// get the session object\nvar session = request.getSession()\n\n// set a session variable\n// by defailt, Alexa only persists session variables to the next request\n// the alexa-app module makes session variables persist across multiple requests\nsession.set(String attributeName, String attributeValue)\n\n// return the value of a session variable\nString session.get(String attributeName)\n\n// session details, as passed by Amazon in the request\nsession.details = { ... }\n```\n\n# Request Handlers\n\nYour app can define a single handler for the `Launch` event and the `SessionEnded` event, and multiple intent handlers.\n\n## LaunchRequest\n\n```javascript\napp.launch(function(request, response) {\n  response.say(\"Hello World\");\n  response.card(\"Hello World\", \"This is an example card\");\n});\n```\n\n## IntentRequest\n\nDefine the handler for multiple intents using multiple calls to `intent()`. Intent schema and sample utterances can also be passed to `intent()`, which is detailed below. Intent handlers that don't return an immediate response (because they do some asynchronous operation) must return `false`. See example further below.\n\n```javascript\napp.intent(\"live\", {\n    \"slots\": {\n      \"city\": \"AMAZON.US_CITY\"\n    },\n    \"utterances\": [\n      \"in {-|city}\"\n    ]\n  }, function(request, response) {\n    response.say(\"You live in \" + request.slot(\"city\"));\n  }\n);\n\napp.intent(\"vacation\", function(request, response) {\n  response.say(\"You're now on vacation.\");\n});\n```\n\n## SessionEndRequest\n\n```javascript\napp.sessionEnded(function(request, response) {\n  // cleanup the user's server-side session\n  logout(request.userId);\n  // no response required\n});\n```\n\n## AudioPlayer Event Request\n\nDefine the handler for multiple events using multiple calls to `audioPlayer()`. You can define only one handler per event. Event handlers that don't return an immediate response (because they do some asynchronous operation) must return false.\n\nYou can define handlers for the following events:\n\n* PlaybackStarted\n* PlaybackFinished\n* PlaybackStopped\n* PlaybackNearlyFinished\n* PlaybackFailed\n\nRead more about AudioPlayer request types in [AudioPlayer Interface Doc](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/custom-audioplayer-interface-reference#audioplayer-requests).\n\nThe following example will return `play` directive with a next audio on `AudioPlayer.PlaybackNearlyFinished` request.\n\n```javascript\napp.audioPlayer(\"PlaybackNearlyFinished\", function(request, response) {\n  // immediate response\n  var stream = {\n    \"url\": \"https://next-song-url\",\n    \"token\": \"some_token\",\n    \"expectedPreviousToken\": \"some_previous_token\",\n    \"offsetInMilliseconds\": 0\n  };\n  response.audioPlayerPlayStream(\"ENQUEUE\", stream);\n});\n```\n\nSee an example of asynchronous response below.\n\n```javascript\napp.audioPlayer(\"PlaybackFinished\", function(request, response) {\n  // async response\n  getNextSongFromDB(function(url, token) {\n    var stream = {\n      \"url\": url,\n      \"token\": token,\n      \"expectedPreviousToken\": \"some_previous_token\",\n      \"offsetInMilliseconds\": 0\n    };\n    response.audioPlayerPlayStream(\"ENQUEUE\", stream);\n    response.send();\n  });\n  return false;\n});\n```\n\n# Execute Code On Every Request\n\nIn addition to specific event handlers, you can define functions that will run on every request.\n\n## pre()\n\nExecuted before any event handlers. This is useful to setup new sessions, validate the `applicationId`, or do any other kind of validations.\n\n```javascript\napp.pre = function(request, response, type) {\n  if (request.applicationId != \"amzn1.echo-sdk-ams.app.000000-d0ed-0000-ad00-000000d00ebe\") {\n    // fail ungracefully\n    response.fail(\"Invalid applicationId\");\n  }\n};\n```\n\nNote that the `post()` method still gets called, even if the `pre()` function calls `send()` or `fail()`. The post method can always override anything done before it.\n\n## post()\n\nThe last thing executed for every request. It is even called if there is an exception or if a response has already been sent. The `post()` function can change anything about the response. It can even turn a `response.fail()` into a `respond.send()` with entirely new content. If `post()` is called after an exception is thrown, the exception itself will be the 4th argument.\n\n```javascript\napp.post = function(request, response, type, exception) {\n  if (exception) {\n    // always turn an exception into a successful response\n    response.clear().say(\"An error occured: \" + exception).send();\n  }\n};\n```\n\n# Schema and Utterances\n\nThe alexa-app module makes it easy to define your intent schema and generate many sample utterances. Optionally pass your schema definition along with your intent handler, and extract the generated content using the `schema()` and `utterances()` functions on your app.\n\n## Schema Syntax\n\nPass an object with two properties: slots and utterances.\n\n```javascript\napp.intent(\"sampleIntent\", {\n    \"slots\": {\n      \"NAME\": \"AMAZON.US_FIRST_NAME\",\n      \"AGE\": \"AMAZON.NUMBER\"\n    },\n    \"utterances\": [\n      \"my {name is|name's} {NAME} and {I am|I'm} {1-100|AGE}{ years old|}\"\n    ]\n  },\n  function(request, response) {\n\n  }\n);\n```\n\n### slots\n\nThe slots object is a simple `name: type` mapping. The type must be one of Amazon's [built-in slot types](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference), such as `AMAZON.DATE` or `AMAZON.NUMBER`.\n\n### custom slot types\n\n[Custom slot types](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interaction-model-reference#Custom Slot Type Syntax) are supported via the following syntax.\n\n```javascript\napp.intent(\"sampleIntent\", {\n    \"slots\": {\n      \"CustomSlotName\": \"CustomSlotType\"\n    },\n    \"utterances\": [\n      \"airport {information|status} for {-|CustomSlotName}\"\n    ]\n  },\n  function(request, response) {... }\n);\n```\n\nThis will result in the following utterance list.\n\n```\nsampleIntent     airport information for {CustomSlotName}\nsampleIntent     airport status for {CustomSlotName}\n```\n\nNote that the \"CustomSlotType\" type values must be specified in the Skill Interface's Interaction Model for the custom slot type to function correctly.\n\n### utterances\n\nThe utterances syntax allows you to generate many (hundreds or even thousands) of sample utterances using just a few samples that get auto-expanded. Any number of sample utterances may be passed in the utterances array. Below are some sample utterances macros and what they will be expanded to.\n\n#### Multiple Options mapped to a Slot\n\n```javascript\n\"my favorite color is {red|green|blue|NAME}\"\n=>\n\"my favorite color is {red|NAME}\"\n\"my favorite color is {green|NAME}\"\n\"my favorite color is {blue|NAME}\"\n```\n\n#### Generate Multiple Versions of Static Text\n\nThis lets you define multiple ways to say a phrase, but combined into a single sample utterance.\n\n```javascript\n\"{what is the|what's the|check the} status\"\n=>\n\"what is the status\"\n\"what's the status\"\n\"check the status\"\n```\n\n#### Auto-Generated Number Ranges\n\nWhen capturing a numeric slot value, it's helpful to generate many sample utterances with different number values.\n\n```javascript\n\"buy {2-5|NUMBER} items\"\n=>\n\"buy {two|NUMBER} items\"\n\"buy {three|NUMBER} items\"\n\"buy {four|NUMBER} items\"\n\"buy {five|NUMBER} items\"\n```\n\nNumber ranges can also increment in steps.\n\n```javascript\n\"buy {5-20 by 5|NUMBER} items\"\n=>\n\"buy {five|NUMBER} items\"\n\"buy {ten|NUMBER} items\"\n\"buy {fifteen|NUMBER} items\"\n\"buy {twenty|NUMBER} items\"\n```\n\n#### Optional Words\n\n```javascript\n\"what is your {favorite |}color\"\n=>\n\"what is your color\"\n\"what is your favorite color\"\n```\n\n#### Using a Dictionary\n\nSeveral intents may use the same list of possible values, so you want to define them in one place, not in each intent schema. Use the app's dictionary.\n\n```javascript\napp.dictionary = {\"colors\":[\"red\",\"green\",\"blue\"]};\n...\n\"my favorite color is {colors|FAVEORITE_COLOR}\"\n\"I like {colors|COLOR}\"\n```\n\n## Generating Schema and Utterances Output\n\nTo get the generated content out of your app, call the `schema()` and `utterances()` functions. See [example/express.js](example/express.js) for one way to output this data.\n\n```javascript\n// returns a String representation of the JSON object\napp.schema() =>\n\n{\n  \"intents\": [{\n    \"intent\": \"MyColorIsIntent\",\n    \"slots\": [{\n      \"name\": \"Color\",\n      \"type\": \"AMAZON.Color\"\n    }]\n  }]\n}\n\napp.utterances() =>\n\nMyColorIsIntent  my color is {dark brown|Color}\nMyColorIsIntent  my color is {green|Color}\nMyColorIsIntent  my favorite color is {red|Color}\nMyColorIsIntent  my favorite color is {navy blue|Color}\nWhatsMyColorIntent whats my color\nWhatsMyColorIntent what is my color\nWhatsMyColorIntent say my color\nWhatsMyColorIntent tell me my color\nWhatsMyColorIntent whats my favorite color\nWhatsMyColorIntent what is my favorite color\nWhatsMyColorIntent say my favorite color\nWhatsMyColorIntent tell me my favorite color\nWhatsMyColorIntent tell me what my favorite color is\n```\n\n# Cards\n\nThe `response.card(Object card)` method allows you to send [Home Cards](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/providing-home-cards-for-the-amazon-alexa-app) on the Alexa app, the companion app available for Fire OS, Android, iOS, and desktop web browsers.\n\nThe full specification for the `card` object passed to this method can be found [here](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interface-reference#card-object).\n\nCard's do not support SSML\n\nIf you just want to display a card that presents the user to link their account call `response.linkAccount()` as a shortcut.\n\n## Card Examples\n\nDisplay text only, aka [Simple](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/providing-home-cards-for-the-amazon-alexa-app#Creating%20a%20Basic%20Home%20Card%20to%20Display%20Text).\n\n```javascript\nresponse.card({\n  type: \"Simple\",\n  title: \"My Cool Card\", // this is not required for type Simple\n  content: \"This is the\\ncontent of my card\"\n});\n```\n\nDisplay text and image, aka [Standard](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/providing-home-cards-for-the-amazon-alexa-app#Creating%20a%20Home%20Card%20to%20Display%20Text%20and%20an%20Image).\n\nMake sure to read the restrictions on hosting the images. Must support CORS AND SSL cert signed by an Amazon approved certification authority.\n\n```javascript\nresponse.card({\n  type: \"Standard\",\n  title: \"My Cool Card\", // this is not required for type Simple or Standard\n  text: \"Your ride is on the way to 123 Main Street!\\nEstimated cost for this ride: $25\",\n  image: { // image is optional\n    smallImageUrl: \"https://carfu.com/resources/card-images/race-car-small.png\", // required\n    largeImageUrl: \"https://carfu.com/resources/card-images/race-car-large.png\"\n  }\n});\n```\n\n# Error Handling\n\nHandler functions should not throw exceptions. Ideally, you should catch errors in your handlers using try/catch and respond with an appropriate output to the user. If exceptions do leak out of handlers, they will be thrown by default. Any exceptions can be handled by a generic error handler which you can define for your app. Error handlers cannot be asynchronous.\n\n```javascript\napp.error = function(exception, request, response) {\n    response.say(\"Sorry, something bad happened\");\n};\n```\n\nIf you do want exceptions to bubble out to the caller (and potentially cause Express to crash, for example), you can throw the exception.\n\n```javascript\napp.error = function(exception, request, response) {\n  console.log(exception);\n  throw exception;\n};\n```\n\n# Examples\n\n## Asynchronous Intent Handler\n\nIf an intent handler will return a response later, it must return `false`. This tells the alexa-app library not to send the response automatically. In this case, the handler function must manually call `response.send()` to finish the response.\n\n```javascript\napp.intent(\"checkStatus\", function(request, response) {\n  http.get(\"http://server.com/status.html\", function(rc) {\n    // this is async and will run after the http call returns\n    response.say(rc.statusText);\n    // must call send to end the original request\n    response.send();\n  });\n  // return false immediately so alexa-app doesn't send the response\n  return false;\n});\n```\n\n## Connect to AWS Lambda\n\nAmazon has documentation on how to setup your Alexa app to run in AWS Lambda.\n\nApps built using alexa-app have a built-in \"handler\" method to handle calls from AWS Lambda. You don't need to do anything different to make them work within Lambda, other than to setup the Lambda Function correctly and make sure that the Handler is set to \"index.handler\", which is the default value.\n\nFor backwards compatibility, or if you wish to change the Handler mapping to something other than index.handler, you can use the lambda() function. See [example/lambda.js](example/lambda.js).\n\n```javascript\nvar app = new alexa.app(\"sample\");\napp.intent( ... );\n// connect the alexa-app to AWS Lambda\nexports.handler = app.lambda();\n```\n\n## Connect to Express\n\n```javascript\nvar express = require(\"express\");\nvar alexa = require(\"alexa-app\");\nvar express_app = express();\n\nvar app = new alexa.app(\"sample\");\napp.launch(function(request,response) {\n  response.say(\"Hello World\");\n});\n\n// this call defines a post() and optionally a get() handler in express, mapped to the alexa-app\n// express_app: the express app instance to map to\n//        path: the path prefix to map to\n// enableDebug: when false, don't map a GET handler, default is true\n//              debugging GET requests call express' render() method using 'test'\napp.express(express_app, \"/echo/\", false);\n\n// now POST calls to /echo/sample in express will be handled by the app.request() function\n// GET calls will not be handled\n```\n\n## Customizing Default Error Messages\n\n```javascript\napp.messages.NO_INTENT_FOUND = \"Why you called dat intent? I don't know bout dat\";\n```\n\nSee the code for default messages you can override.\n\n## Read/write session data\n\n```javascript\napp.launch(function(request, response) {\n  request.getSession().set(\"number\", 42);\n  response.say(\"Would you like to know the number?\");\n  response.shouldEndSession(false);\n});\n\napp.intent(\"tellme\", function(request, response) {\n  var session = request.getSession();\n  response.say(\"The number is \" + session.get(\"number\"));\n  // clear only the 'number' attribute from the session\n  session.clear(\"number\");\n});\n\n// the session variables can be entirely cleared, or cleared by key\napp.intent(\"clear\", function(request, response) {\n  var session = request.getSession();\n  session.clear(); // or: session.clear(\"key\") to clear a single value\n  response.say(\"Session cleared!\");\n});\n```\n\nBy default, alexa-app will persist every request session attribute into the response. This way, any session attributes you set will be sent on every subsequent request, as is typical in most web programming environments. If you wish to disable this feature, you can do so by setting `app.persistentSession` to `false`.\n\n```javascript\nvar app = new alexa.app(\"test\");\napp.persistentSession = false;\n```\n\n## Define a custom endpoint name for an app\n\nWhen mapped to express, the default endpoint for each app is the name of the app. You can customize this using the second parameter to the `app()` method.\n\n```javascript\nvar app = new alexa.app(\"hello\", \"myEndpointName\");\n```\n\n## Accessing All Defined Apps\n\nAll named apps can be found in the `alexa.apps` object, keyed by name. The value is the app itself.\n\n## Hosting\n\n### Production\n\nGenerally, an alexa-app module can be used inside a stand-alone Node.js app, within an HTTPS server or within an AWS Lambda function. The library only cares about JSON in and JSON out. It is agnostic about the environment that is using it, but it provides some convenience methods to hook into common environments.\n\nIf you don't use AWS Lambda and host an Alexa skill on your own webserver, you will need to validate that requests come from Alexa. This validation is *not* provided by this module. For more details on how to handle alexa request validation, look at [alexa-verifier](https://github.com/mreinstein/alexa-verifier) which provides the necessary code, along with an example showing how to integrate with express.\n\n### Development\n\nUse the [alexa-app-server](https://github.com/matt-kruse/alexa-app-server) module in combination with alexa-app as a container for multiple alexa-app skills using Node.js and Express. It lets you run and debug your apps locally, and can also be used as a full production server for your apps.\n\n# History\n\nSee [CHANGELOG](CHANGELOG.md) for details.\n\n# License\n\nCopyright (c) 2016 Matt Kruse\n\nMIT License, see [LICENSE](LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/matt-kruse/alexa-app.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha -- -R spec",
    "danger": "danger",
    "lint": "eslint index.js;",
    "test": "mocha",
    "test-travis": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -R spec ./test/*"
  },
  "version": "2.4.0"
}
