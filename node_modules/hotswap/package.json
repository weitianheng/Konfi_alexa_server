{
  "_args": [
    [
      {
        "raw": "hotswap@^1.1.0",
        "scope": null,
        "escapedName": "hotswap",
        "name": "hotswap",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/weisso/Desktop/6_semester/github/node_modules/alexa-app-server"
    ]
  ],
  "_from": "hotswap@>=1.1.0 <2.0.0",
  "_id": "hotswap@1.1.0",
  "_inCache": true,
  "_location": "/hotswap",
  "_npmUser": {
    "name": "rlidwka",
    "email": "alex@kocharin.ru"
  },
  "_npmVersion": "1.4.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hotswap@^1.1.0",
    "scope": null,
    "escapedName": "hotswap",
    "name": "hotswap",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/alexa-app-server"
  ],
  "_resolved": "https://registry.npmjs.org/hotswap/-/hotswap-1.1.0.tgz",
  "_shasum": "f39d1c64e7d26af3cb784b31e699400a4d48a5c1",
  "_shrinkwrap": null,
  "_spec": "hotswap@^1.1.0",
  "_where": "/Users/weisso/Desktop/6_semester/github/node_modules/alexa-app-server",
  "author": {
    "name": "Alex Kocharin",
    "url": "rlidwka"
  },
  "bugs": {
    "url": "https://github.com/rlidwka/node-hotswap/issues"
  },
  "dependencies": {
    "async": "*"
  },
  "description": "Code hotswapping for your node.js modules",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "f39d1c64e7d26af3cb784b31e699400a4d48a5c1",
    "tarball": "https://registry.npmjs.org/hotswap/-/hotswap-1.1.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/rlidwka/node-hotswap",
  "main": "./hotswap",
  "maintainers": [
    {
      "name": "rlidwka",
      "email": "alex@kocharin.ru"
    }
  ],
  "name": "hotswap",
  "optionalDependencies": {},
  "readme": "## Basic usage\n\nJust write this in your main file (or in the repl):\n\n```javascript\nrequire('hotswap');\n```\n\nAnd then add this line to modules you want to be reloaded (it tells *node-hotswap* to watch this file):\n\n```javascript\nmodule.change_code = 1;\n```\n\nNow if you change your modules, they will be reloaded automatically.\n\nDemo (you have to wait more than 1 second between writings - it's file system limitations):\n```javascript\n\nvar fs = require('fs');\nvar hotswap = require('hotswap');\n\n// writing the initial version of test.js\nfs.writeFileSync(\"hotswap-test.js\", \"module.exports.version = 0; module.change_code = true;\");\n\n// requiring it\nvar test = require('./hotswap-test')\nconsole.log(test);\n\nhotswap.on('swap', function() {\n        // we are going to console.log(test) whenever it's changed\n        console.log(test);\n});\n\nsetTimeout(function() {\n        fs.writeFile(\"hotswap-test.js\", \"module.exports.version = 1; module.change_code = true;\")\n}, 1000);\n\nsetTimeout(function() {\n        fs.writeFile(\"hotswap-test.js\", \"module.exports.hi_there = function(){}; module.change_code = true;\")\n}, 2000);\n\nsetTimeout(function() {\n        fs.writeFile(\"hotswap-test.js\", \"module.exports = {wow: 'thats working'}; module.change_code = true;\")\n}, 3000);\n\n/* outputs:\n * { version: 0 }\n * { version: 1 }\n * { hi_there: [Function] }\n * { wow: 'thats working' }\n */\n```\n\n## What does it do?\n\nThis module overrides default functions in require.extension and do some magic there. It remembers all references to `exports` objects of modules with function `module.change_code` defined. When module is changed, contents of it's old exports object is replaced with contents of the new one.\n\n```javascript\n// So, this will work fine, m will be changed:\nvar m = require('hot-swapping-module');\n\n// but \"hotswap\" have to way to replace m.func with new value\n// so dont do this unless you really want to use old code, \nvar m.func = require('hot-swapping-module').func;\n```\n\n## Events\n\n`require('hotswap')` returns an EventEmitter that emits the following events:\n\n- `change` - when one of the watched modules has changed\n- `swap` - after successful replacing an old module with a new version\n- `error` - if there was a filesystem error or something like that\n\n## Local variables\n\nWhen old module is replaced by the new one, local variables of the old module will be lost. \nIf you want to save them, you can use `module.change_code`.\n\nIf `module.change_code` is defined as a function it will be called before module is reloaded. So you can write up something like that:\n\n```javascript\nmodule.cache = {} // it's important data you want to save\n\nmodule.change_code = function(oldmod, newmod, exports_object) {\n  newmod.cache = oldmod.cache;\n}\n```\n\n## Configuration\n\nYou can configure `node-hotswap` using `configure` function. \n\n```javascript\nrequire('hotswap').configure({\n\t// a list of extensions registered by hotswap\n\t//\n\t// you can define your own extension for such files if you are afraid \n\t// that this module would mess up with some other modules (shouldn't \n\t// happen though)\n    //\n\t// default: {'.js': 'js', '.coffee': 'coffee'}\n\textensions: {'.js': ['js', 'jsx'], '.coffee': 'coffee'},\n\n\t// enable or disable fs.watch() on hotswapping files\n\t// default: true\n\twatch: true,\n\n\t// automatically reload files on change\n\t// default: true\n\tautoreload: true,\n});\n```\n\n## Todo\n\nI should really write up some good documentation and examples here -_-\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rlidwka/node-hotswap.git"
  },
  "version": "1.1.0"
}
