{
  "_args": [
    [
      {
        "raw": "alexa-verifier@0.0.5",
        "scope": null,
        "escapedName": "alexa-verifier",
        "name": "alexa-verifier",
        "rawSpec": "0.0.5",
        "spec": "0.0.5",
        "type": "version"
      },
      "/Users/weisso/Desktop/6_semester/github/node_modules/alexa-app-server"
    ]
  ],
  "_from": "alexa-verifier@0.0.5",
  "_id": "alexa-verifier@0.0.5",
  "_inCache": true,
  "_location": "/alexa-verifier",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/alexa-verifier-0.0.5.tgz_1467742520257_0.6558092790655792"
  },
  "_npmUser": {
    "name": "mreinstein",
    "email": "reinstein.mike@gmail.com"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "alexa-verifier@0.0.5",
    "scope": null,
    "escapedName": "alexa-verifier",
    "name": "alexa-verifier",
    "rawSpec": "0.0.5",
    "spec": "0.0.5",
    "type": "version"
  },
  "_requiredBy": [
    "/alexa-app-server"
  ],
  "_resolved": "https://registry.npmjs.org/alexa-verifier/-/alexa-verifier-0.0.5.tgz",
  "_shasum": "54233cf0e33319cf3eba732b6c307902b5916228",
  "_shrinkwrap": null,
  "_spec": "alexa-verifier@0.0.5",
  "_where": "/Users/weisso/Desktop/6_semester/github/node_modules/alexa-app-server",
  "author": {
    "name": "Mike Reinstein"
  },
  "bugs": {
    "url": "https://github.com/mreinstein/alexa-verifier/issues"
  },
  "dependencies": {
    "openssl-cert-tools": "^1.2.0",
    "request": "^2.67.0",
    "validator": "^5.3.0"
  },
  "description": "Verify HTTP requests sent to an Alexa skill are sent from Amazon",
  "devDependencies": {
    "tap": "^6.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "54233cf0e33319cf3eba732b6c307902b5916228",
    "tarball": "https://registry.npmjs.org/alexa-verifier/-/alexa-verifier-0.0.5.tgz"
  },
  "gitHead": "4de8970efaa6605a0b56ef6221f6a178c65c53e4",
  "homepage": "https://github.com/mreinstein/alexa-verifier#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mreinstein",
      "email": "reinstein.mike@gmail.com"
    }
  ],
  "name": "alexa-verifier",
  "optionalDependencies": {},
  "readme": "# alexa-verifier\nVerify HTTP requests sent to an Alexa skill are sent from Amazon.\n\nThis module is framework-agnostic, but since express is currently the most popular choice I'll \nprovide an example of that below.\n\n\n### motivation\nPart of the certication process for alexa skills hosted on a generic web service (i.e., not AWS Lambda) is that your skill must validate requests are actually coming from Amazon. This is enforced by checking:\n\n* the timestamp of the request\n* the validity of the certificate\n* the signature of the the request signed with the aforementioned certificate\n\nThis module provides a function which handles this validation.\n\n\n### api\n\n```javascript\nverifier(cert_url, signature, requestRawBody, callback);\n```\n\n* `cert_url`  full url of the certificate to verify (from the HTTP request header named `signaturecertchainurl`)\n* `signature` signature of the request (from the HTTP request header named `signature`)\n* `requestRawBody`  full body string from POST request\n* `callback`  completion function. has 1 argument which indicates error. falsey when verification passes\n\n\n### express example usage\n\nIf you're using the ever-popular `body-parser` module to parse request bodies, you'll need some\nmagic to actually get the raw request body. Much of the following snippet is related to getting at the raw request body.\n\n\n```javascript\nvar express  = require('express');\nvar verifier = require('alexa-verifier');\n\n\nvar app = express();\n\n// the alexa API calls specify an HTTPS certificate that must be validated.\n// the validation uses the request's raw POST body which isn't available from\n// the body parser module. so we look for any requests that include a\n// signaturecertchainurl HTTP request header, parse out the entire body as a\n// text string, and set a flag on the request object so other body parser\n// middlewares don't try to parse the body again\napp.use(function(req, res, next) {\n  if (!req.headers.signaturecertchainurl) {\n    return next();\n  }\n\n  // mark the request body as already having been parsed so it's ignored by\n  // other body parser middlewares\n  req._body = true;\n  req.rawBody = '';\n  req.on('data', function(data) {\n    return req.rawBody += data;\n  });\n  req.on('end', function() {\n    var cert_url, er, error, requestBody, signature;\n    try {\n      req.body = JSON.parse(req.rawBody);\n    } catch (error) {\n      er = error;\n      req.body = {};\n    }\n    cert_url = req.headers.signaturecertchainurl;\n    signature = req.headers.signature;\n    requestBody = req.rawBody;\n    verifier(cert_url, signature, requestBody, function(er) {\n      if (er) {\n        console.error('error validating the alexa cert:', er);\n        res.status(401).json({ status: 'failure', reason: er });\n      } else {\n        next();\n      }\n    });\n  });\n});\n\n// other body parsers, etc. follow ...\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mreinstein/alexa-verifier.git"
  },
  "scripts": {
    "test": "tap ./test"
  },
  "version": "0.0.5"
}
